{"version":3,"sources":["logo.svg","components/map/Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","heatmap","props","react_default","a","createElement","style","backgroundImage","mapUrl","backgroundSize","width","height","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMapSelect","eventKey","event","console","log","setState","state","playerPositionX","playerPositionY","className","Navbar_default","fixed","bg","Collapse","id","Nav_default","Link","onSelect","Map","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kOCOzBC,EALC,SAACC,GAAD,OACRC,EAAAC,EAAAC,cAAA,OAAKC,MAAS,CAACC,gBAAiB,OAAOL,EAAMM,OAAO,IAAKC,eAAgB,UAAWC,MAAM,IAAKC,OAAO,QCuE/FC,cAhEb,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KA+BRkB,YAAc,SAACC,EAASC,GAEtB,OADAC,QAAQC,IAAIH,GACLA,GACL,IAAK,UACHR,EAAKY,SAAS,CACZjB,OAAU,iFAEZ,MACF,IAAK,UACHK,EAAKY,SAAS,CACZjB,OAAU,iFAEZ,MACF,IAAK,SACHK,EAAKY,SAAS,CACZjB,OAAU,gFAEZ,MACF,IAAK,UACHK,EAAKY,SAAS,CACZjB,OAAU,iFAEZ,MACF,QACEK,EAAKY,SAAS,CACZjB,OAAU,OArDhBK,EAAKa,MAAQ,CACXC,gBAAiB,EACjBC,gBAAiB,EACjBpB,OAAQ,IAPOK,wEAWjB,OACEV,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAQ2B,MAAM,MAAMC,GAAG,SACrB7B,EAAAC,EAAAC,cAACyB,EAAA1B,EAAO6B,SAAR,CAAiBC,GAAG,oBAClB/B,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CAAKyB,UAAU,WACb1B,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAIgC,KAAL,CAAUf,SAAS,UAAUgB,SAAUrB,KAAKI,aAA5C,WACAjB,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAIgC,KAAL,CAAUf,SAAS,UAAUgB,SAAUrB,KAAKI,aAA5C,WACAjB,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAIgC,KAAL,CAAUf,SAAS,SAASgB,SAAUrB,KAAKI,aAA3C,UACAjB,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAIgC,KAAL,CAAUf,SAAS,UAAUgB,SAAUrB,KAAKI,aAA5C,cAKiB,IAArBJ,KAAKU,MAAMlB,OACTL,EAAAC,EAAAC,cAACiC,EAAD,CAAK9B,OAAQQ,KAAKU,MAAMlB,SACtB,aA5BI+B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.22b6088c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react'\r\n\r\nconst heatmap = (props) => (\r\n        <div style = {{backgroundImage: \"url(\"+props.mapUrl+\")\", backgroundSize: \"contain\", width:800, height:800}}>\r\n        </div>\r\n    )\r\n\r\nexport default heatmap;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n//import Erangel from './components/erangel/Erangel'\r\nimport Map from './components/map/Map';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n      playerPositionX: 0,\r\n      playerPositionY: 0,\r\n      mapUrl: \"\",\r\n    }    \r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar fixed=\"top\" bg=\"light\">\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link eventKey=\"erangel\" onSelect={this.onMapSelect}>Erangel</Nav.Link>\r\n              <Nav.Link eventKey=\"miramar\" onSelect={this.onMapSelect}>Miramar</Nav.Link>\r\n              <Nav.Link eventKey=\"sanhok\" onSelect={this.onMapSelect}>Sanhok</Nav.Link>\r\n              <Nav.Link eventKey=\"vikendi\" onSelect={this.onMapSelect}>Vikendi</Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        {\r\n          this.state.mapUrl != \"\" ? (\r\n            <Map mapUrl={this.state.mapUrl}></Map>\r\n          ) : null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onMapSelect = (eventKey,event) => {\r\n    console.log(eventKey)\r\n    switch(eventKey) {\r\n      case \"erangel\":\r\n        this.setState({\r\n          \"mapUrl\": \"https://storage.googleapis.com/pubg-hackathon-plots/heatmap/Erangel_heat.png\"\r\n        });\r\n        break;\r\n      case \"miramar\":\r\n        this.setState({\r\n          \"mapUrl\": \"https://storage.googleapis.com/pubg-hackathon-plots/heatmap/Miramar_heat.png\"\r\n        });\r\n        break;\r\n      case \"sanhok\":\r\n        this.setState({\r\n          \"mapUrl\": \"https://storage.googleapis.com/pubg-hackathon-plots/heatmap/Sanhok_heat.png\"\r\n        });\r\n        break;\r\n      case \"vikendi\":\r\n        this.setState({\r\n          \"mapUrl\": \"https://storage.googleapis.com/pubg-hackathon-plots/heatmap/Vikendi_heat.png\"\r\n        });\r\n        break;\r\n      default:\r\n        this.setState({\r\n          \"mapUrl\": \"\"\r\n        });\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}